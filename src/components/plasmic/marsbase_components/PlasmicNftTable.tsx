// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: S7FYhea1xT
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ColumnSorter from "../../ColumnSorter"; // plasmic-import: tVe3iw2rzS/component
import NftOverview from "../../NftOverview"; // plasmic-import: a7WqxJ4ZPn/component
import NftProgress from "../../NftProgress"; // plasmic-import: YHwpijO3GT/component
import NftAvailableClaim from "../../NftAvailableClaim"; // plasmic-import: Wiffry2Q-b/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicNftTable.module.css"; // plasmic-import: S7FYhea1xT/css

export type PlasmicNftTable__VariantMembers = {};

export type PlasmicNftTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicNftTable__VariantsArgs;
export const PlasmicNftTable__VariantProps = new Array<VariantPropType>();

export type PlasmicNftTable__ArgsType = {};
type ArgPropType = keyof PlasmicNftTable__ArgsType;
export const PlasmicNftTable__ArgProps = new Array<ArgPropType>();

export type PlasmicNftTable__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  nftOverview?: p.Flex<typeof NftOverview>;
  nftProgress?: p.Flex<typeof NftProgress>;
  nftAvailableClaim?: p.Flex<typeof NftAvailableClaim>;
};

export interface DefaultNftTableProps {
  className?: string;
}

function PlasmicNftTable__RenderFunc(props: {
  variants: PlasmicNftTable__VariantsArgs;
  args: PlasmicNftTable__ArgsType;
  overrides: PlasmicNftTable__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__nAmFt)}>
        <div className={classNames(projectcss.all, sty.column__uO02L)}>
          <ColumnSorter
            className={classNames("__wab_instance", sty.columnSorter__gZsMk)}
          />
        </div>

        <div className={classNames(projectcss.all, sty.column__biMdD)}>
          <ColumnSorter
            className={classNames("__wab_instance", sty.columnSorter__ncv0P)}
          />
        </div>

        <div className={classNames(projectcss.all, sty.column__lNdFk)}>
          <ColumnSorter
            className={classNames("__wab_instance", sty.columnSorter__fw433)}
          />
        </div>
      </div>

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns__mTxVu)}
        >
          <div className={classNames(projectcss.all, sty.column__qkqb2)}>
            <NftOverview
              data-plasmic-name={"nftOverview"}
              data-plasmic-override={overrides.nftOverview}
              className={classNames("__wab_instance", sty.nftOverview)}
            />
          </div>

          <div className={classNames(projectcss.all, sty.column__y6CFc)}>
            <NftProgress
              data-plasmic-name={"nftProgress"}
              data-plasmic-override={overrides.nftProgress}
              className={classNames("__wab_instance", sty.nftProgress)}
            />
          </div>

          <div className={classNames(projectcss.all, sty.column__gokb1)}>
            <NftAvailableClaim
              data-plasmic-name={"nftAvailableClaim"}
              data-plasmic-override={overrides.nftAvailableClaim}
              className={classNames("__wab_instance", sty.nftAvailableClaim)}
            />
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "nftOverview", "nftProgress", "nftAvailableClaim"],
  freeBox: ["freeBox", "nftOverview", "nftProgress", "nftAvailableClaim"],
  nftOverview: ["nftOverview"],
  nftProgress: ["nftProgress"],
  nftAvailableClaim: ["nftAvailableClaim"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  nftOverview: typeof NftOverview;
  nftProgress: typeof NftProgress;
  nftAvailableClaim: typeof NftAvailableClaim;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNftTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNftTable__VariantsArgs;
    args?: PlasmicNftTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNftTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNftTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNftTable__ArgProps,
      internalVariantPropNames: PlasmicNftTable__VariantProps
    });

    return PlasmicNftTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNftTable";
  } else {
    func.displayName = `PlasmicNftTable.${nodeName}`;
  }
  return func;
}

export const PlasmicNftTable = Object.assign(
  // Top-level PlasmicNftTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    nftOverview: makeNodeComponent("nftOverview"),
    nftProgress: makeNodeComponent("nftProgress"),
    nftAvailableClaim: makeNodeComponent("nftAvailableClaim"),

    // Metadata about props expected for PlasmicNftTable
    internalVariantProps: PlasmicNftTable__VariantProps,
    internalArgProps: PlasmicNftTable__ArgProps
  }
);

export default PlasmicNftTable;
/* prettier-ignore-end */
