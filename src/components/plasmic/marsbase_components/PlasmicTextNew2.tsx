// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: 4QNW70LTh7g
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicTextNew2.module.css"; // plasmic-import: 4QNW70LTh7g/css

export type PlasmicTextNew2__VariantMembers = {
  weight: "medium" | "semiBold";
  size: "_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28";
  title: "title";
  colors: "gray" | "red" | "white";
};

export type PlasmicTextNew2__VariantsArgs = {
  weight?: SingleChoiceArg<"medium" | "semiBold">;
  size?: SingleChoiceArg<"_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28">;
  title?: SingleBooleanChoiceArg<"title">;
  colors?: SingleChoiceArg<"gray" | "red" | "white">;
};

type VariantPropType = keyof PlasmicTextNew2__VariantsArgs;
export const PlasmicTextNew2__VariantProps = new Array<VariantPropType>(
  "weight",
  "size",
  "title",
  "colors"
);

export type PlasmicTextNew2__ArgsType = {};
type ArgPropType = keyof PlasmicTextNew2__ArgsType;
export const PlasmicTextNew2__ArgProps = new Array<ArgPropType>();

export type PlasmicTextNew2__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultTextNew2Props {
  weight?: SingleChoiceArg<"medium" | "semiBold">;
  size?: SingleChoiceArg<"_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28">;
  title?: SingleBooleanChoiceArg<"title">;
  colors?: SingleChoiceArg<"gray" | "red" | "white">;
  className?: string;
}

function PlasmicTextNew2__RenderFunc(props: {
  variants: PlasmicTextNew2__VariantsArgs;
  args: PlasmicTextNew2__ArgsType;
  overrides: PlasmicTextNew2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    (hasVariant(variants, "title", "title") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootcolors_gray]: hasVariant(variants, "colors", "gray"),
            [sty.rootcolors_red]: hasVariant(variants, "colors", "red"),
            [sty.rootcolors_white]: hasVariant(variants, "colors", "white"),
            [sty.rootsize__10]: hasVariant(variants, "size", "_10"),
            [sty.rootsize__11]: hasVariant(variants, "size", "_11"),
            [sty.rootsize__12]: hasVariant(variants, "size", "_12"),
            [sty.rootsize__14]: hasVariant(variants, "size", "_14"),
            [sty.rootsize__24]: hasVariant(variants, "size", "_24"),
            [sty.rootsize__28]: hasVariant(variants, "size", "_28"),
            [sty.roottitle]: hasVariant(variants, "title", "title"),
            [sty.rootweight_medium]: hasVariant(variants, "weight", "medium"),
            [sty.rootweight_semiBold]: hasVariant(
              variants,
              "weight",
              "semiBold"
            )
          }
        )}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textcolors_gray]: hasVariant(variants, "colors", "gray"),
              [sty.textcolors_red]: hasVariant(variants, "colors", "red"),
              [sty.textcolors_white]: hasVariant(variants, "colors", "white"),
              [sty.textsize__10]: hasVariant(variants, "size", "_10"),
              [sty.textsize__11]: hasVariant(variants, "size", "_11"),
              [sty.textsize__12]: hasVariant(variants, "size", "_12"),
              [sty.textsize__14]: hasVariant(variants, "size", "_14"),
              [sty.textsize__24]: hasVariant(variants, "size", "_24"),
              [sty.textsize__28]: hasVariant(variants, "size", "_28"),
              [sty.texttitle]: hasVariant(variants, "title", "title"),
              [sty.textweight_medium]: hasVariant(variants, "weight", "medium"),
              [sty.textweight_semiBold]: hasVariant(
                variants,
                "weight",
                "semiBold"
              )
            }
          )}
        >
          {"Enter some text"}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextNew2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextNew2__VariantsArgs;
    args?: PlasmicTextNew2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTextNew2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextNew2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextNew2__ArgProps,
      internalVariantPropNames: PlasmicTextNew2__VariantProps
    });

    return PlasmicTextNew2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextNew2";
  } else {
    func.displayName = `PlasmicTextNew2.${nodeName}`;
  }
  return func;
}

export const PlasmicTextNew2 = Object.assign(
  // Top-level PlasmicTextNew2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicTextNew2
    internalVariantProps: PlasmicTextNew2__VariantProps,
    internalArgProps: PlasmicTextNew2__ArgProps
  }
);

export default PlasmicTextNew2;
/* prettier-ignore-end */
