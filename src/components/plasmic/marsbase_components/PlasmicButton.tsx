// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: IDy-UAQYMv
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: IDy-UAQYMv/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: zwmcUxC4SL1/icon

export type PlasmicButton__VariantMembers = {
  size: "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
  colors:
    | "standart"
    | "red"
    | "gradient"
    | "standartStroke"
    | "redStroke"
    | "dark"
    | "defaultStroke";
  isDisable: "isDisable";
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
};

export type PlasmicButton__VariantsArgs = {
  size?: SingleChoiceArg<"xs" | "sm" | "md" | "lg" | "xl" | "xxl">;
  colors?: SingleChoiceArg<
    | "standart"
    | "red"
    | "gradient"
    | "standartStroke"
    | "redStroke"
    | "dark"
    | "defaultStroke"
  >;
  isDisable?: SingleBooleanChoiceArg<"isDisable">;
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
};

type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "size",
  "colors",
  "isDisable",
  "showStartIcon",
  "showEndIcon"
);

export type PlasmicButton__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>("children");

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<"button">;
};

export interface DefaultButtonProps {
  children?: React.ReactNode;
  size?: SingleChoiceArg<"xs" | "sm" | "md" | "lg" | "xl" | "xxl">;
  colors?: SingleChoiceArg<
    | "standart"
    | "red"
    | "gradient"
    | "standartStroke"
    | "redStroke"
    | "dark"
    | "defaultStroke"
  >;
  isDisable?: SingleBooleanChoiceArg<"isDisable">;
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  className?: string;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisDisable]: hasVariant(variants, "isDisable", "isDisable") }
      )}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button, {
          [sty.buttoncolors_dark]: hasVariant(variants, "colors", "dark"),
          [sty.buttoncolors_defaultStroke]: hasVariant(
            variants,
            "colors",
            "defaultStroke"
          ),
          [sty.buttoncolors_gradient]: hasVariant(
            variants,
            "colors",
            "gradient"
          ),
          [sty.buttoncolors_redStroke]: hasVariant(
            variants,
            "colors",
            "redStroke"
          ),
          [sty.buttoncolors_red]: hasVariant(variants, "colors", "red"),
          [sty.buttoncolors_standartStroke]: hasVariant(
            variants,
            "colors",
            "standartStroke"
          ),
          [sty.buttoncolors_standart]: hasVariant(
            variants,
            "colors",
            "standart"
          ),
          [sty.buttonisDisable]: hasVariant(variants, "isDisable", "isDisable"),
          [sty.buttonshowEndIcon]: hasVariant(
            variants,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.buttonshowStartIcon]: hasVariant(
            variants,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.buttonsize_lg]: hasVariant(variants, "size", "lg"),
          [sty.buttonsize_md]: hasVariant(variants, "size", "md"),
          [sty.buttonsize_sm]: hasVariant(variants, "size", "sm"),
          [sty.buttonsize_xl]: hasVariant(variants, "size", "xl"),
          [sty.buttonsize_xxl]: hasVariant(variants, "size", "xxl")
        })}
        disabled={
          hasVariant(variants, "isDisable", "isDisable") ? true : undefined
        }
      >
        {(
          hasVariant(variants, "showStartIcon", "showStartIcon") ? true : true
        ) ? (
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__ivce, {
              [sty.svgshowStartIcon__ivceBa61]: hasVariant(
                variants,
                "showStartIcon",
                "showStartIcon"
              )
            })}
            role={"img"}
          />
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: "Click me",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolors_dark]: hasVariant(
              variants,
              "colors",
              "dark"
            ),
            [sty.slotTargetChildrencolors_defaultStroke]: hasVariant(
              variants,
              "colors",
              "defaultStroke"
            ),
            [sty.slotTargetChildrencolors_gradient]: hasVariant(
              variants,
              "colors",
              "gradient"
            ),
            [sty.slotTargetChildrencolors_redStroke]: hasVariant(
              variants,
              "colors",
              "redStroke"
            ),
            [sty.slotTargetChildrencolors_red]: hasVariant(
              variants,
              "colors",
              "red"
            ),
            [sty.slotTargetChildrencolors_standartStroke]: hasVariant(
              variants,
              "colors",
              "standartStroke"
            ),
            [sty.slotTargetChildrencolors_standart]: hasVariant(
              variants,
              "colors",
              "standart"
            ),
            [sty.slotTargetChildrenisDisable]: hasVariant(
              variants,
              "isDisable",
              "isDisable"
            ),
            [sty.slotTargetChildrenshowStartIcon]: hasVariant(
              variants,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.slotTargetChildrensize_lg]: hasVariant(variants, "size", "lg"),
            [sty.slotTargetChildrensize_md]: hasVariant(variants, "size", "md"),
            [sty.slotTargetChildrensize_sm]: hasVariant(variants, "size", "sm"),
            [sty.slotTargetChildrensize_xl]: hasVariant(variants, "size", "xl"),
            [sty.slotTargetChildrensize_xxl]: hasVariant(
              variants,
              "size",
              "xxl"
            )
          })
        })}

        {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : true) ? (
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg___0SICd, {
              [sty.svgshowEndIcon___0SICdTdzk]: hasVariant(
                variants,
                "showEndIcon",
                "showEndIcon"
              )
            })}
            role={"img"}
          />
        ) : null}
      </button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
