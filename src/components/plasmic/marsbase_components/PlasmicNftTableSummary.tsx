// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: O93YgHOHgbm
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SummaryDescription from "../../SummaryDescription"; // plasmic-import: EHa0voQ-C0/component
import Text from "../../Text"; // plasmic-import: sIxKMhfpOf/component
import SummaryTotalUnclaimed from "../../SummaryTotalUnclaimed"; // plasmic-import: HBTbJNVG66/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicNftTableSummary.module.css"; // plasmic-import: O93YgHOHgbm/css

export type PlasmicNftTableSummary__VariantMembers = {
  screen: "mobile";
};

export type PlasmicNftTableSummary__VariantsArgs = {
  screen?: SingleChoiceArg<"mobile">;
};

type VariantPropType = keyof PlasmicNftTableSummary__VariantsArgs;
export const PlasmicNftTableSummary__VariantProps = new Array<VariantPropType>(
  "screen"
);

export type PlasmicNftTableSummary__ArgsType = {};
type ArgPropType = keyof PlasmicNftTableSummary__ArgsType;
export const PlasmicNftTableSummary__ArgProps = new Array<ArgPropType>();

export type PlasmicNftTableSummary__OverridesType = {
  root?: p.Flex<"div">;
  summaryDescription?: p.Flex<typeof SummaryDescription>;
  text?: p.Flex<typeof Text>;
  summaryTotalUnclaimed?: p.Flex<typeof SummaryTotalUnclaimed>;
};

export interface DefaultNftTableSummaryProps {
  screen?: SingleChoiceArg<"mobile">;
  className?: string;
}

function PlasmicNftTableSummary__RenderFunc(props: {
  variants: PlasmicNftTableSummary__VariantsArgs;
  args: PlasmicNftTableSummary__ArgsType;
  overrides: PlasmicNftTableSummary__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootscreen_mobile]: hasVariant(variants, "screen", "mobile") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__d8Obw, {
          [sty.freeBoxscreen_mobile__d8ObwKfRkn]: hasVariant(
            variants,
            "screen",
            "mobile"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__fkc0J, {
            [sty.freeBoxscreen_mobile__fkc0JKfRkn]: hasVariant(
              variants,
              "screen",
              "mobile"
            )
          })}
        >
          <SummaryDescription
            data-plasmic-name={"summaryDescription"}
            data-plasmic-override={overrides.summaryDescription}
            className={classNames("__wab_instance", sty.summaryDescription, {
              [sty.summaryDescriptionscreen_mobile]: hasVariant(
                variants,
                "screen",
                "mobile"
              )
            })}
          >
            <Text
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames("__wab_instance", sty.text)}
              size={"_24" as const}
              weight={"semiBold" as const}
            />
          </SummaryDescription>
        </div>

        <div
          className={classNames(projectcss.all, sty.freeBox__ogc2E, {
            [sty.freeBoxscreen_mobile__ogc2EKfRkn]: hasVariant(
              variants,
              "screen",
              "mobile"
            )
          })}
        >
          <SummaryTotalUnclaimed
            data-plasmic-name={"summaryTotalUnclaimed"}
            data-plasmic-override={overrides.summaryTotalUnclaimed}
            className={classNames("__wab_instance", sty.summaryTotalUnclaimed, {
              [sty.summaryTotalUnclaimedscreen_mobile]: hasVariant(
                variants,
                "screen",
                "mobile"
              )
            })}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "summaryDescription", "text", "summaryTotalUnclaimed"],
  summaryDescription: ["summaryDescription", "text"],
  text: ["text"],
  summaryTotalUnclaimed: ["summaryTotalUnclaimed"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  summaryDescription: typeof SummaryDescription;
  text: typeof Text;
  summaryTotalUnclaimed: typeof SummaryTotalUnclaimed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNftTableSummary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNftTableSummary__VariantsArgs;
    args?: PlasmicNftTableSummary__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNftTableSummary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNftTableSummary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNftTableSummary__ArgProps,
      internalVariantPropNames: PlasmicNftTableSummary__VariantProps
    });

    return PlasmicNftTableSummary__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNftTableSummary";
  } else {
    func.displayName = `PlasmicNftTableSummary.${nodeName}`;
  }
  return func;
}

export const PlasmicNftTableSummary = Object.assign(
  // Top-level PlasmicNftTableSummary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    summaryDescription: makeNodeComponent("summaryDescription"),
    text: makeNodeComponent("text"),
    summaryTotalUnclaimed: makeNodeComponent("summaryTotalUnclaimed"),

    // Metadata about props expected for PlasmicNftTableSummary
    internalVariantProps: PlasmicNftTableSummary__VariantProps,
    internalArgProps: PlasmicNftTableSummary__ArgProps
  }
);

export default PlasmicNftTableSummary;
/* prettier-ignore-end */
