// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: HA02ocYHIWR
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicInput.module.css"; // plasmic-import: HA02ocYHIWR/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: s91taWCHpvC/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: zwmcUxC4SL1/icon

export type PlasmicInput__VariantMembers = {
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  isDisabled: "isDisabled";
  color: "stroke" | "whiteStroke";
  showUpLabel: "showUpLabel";
  showDownLabel: "showDownLabel";
  percent: "percent";
  showTokenName: "showTokenName";
};

export type PlasmicInput__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  color?: SingleChoiceArg<"stroke" | "whiteStroke">;
  showUpLabel?: SingleBooleanChoiceArg<"showUpLabel">;
  showDownLabel?: SingleBooleanChoiceArg<"showDownLabel">;
  percent?: SingleBooleanChoiceArg<"percent">;
  showTokenName?: SingleBooleanChoiceArg<"showTokenName">;
};

type VariantPropType = keyof PlasmicInput__VariantsArgs;
export const PlasmicInput__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "showEndIcon",
  "isDisabled",
  "color",
  "showUpLabel",
  "showDownLabel",
  "percent",
  "showTokenName"
);

export type PlasmicInput__ArgsType = {
  placeholder?: string;
  endIcon?: React.ReactNode;
  value?: any;
  name?: string;
  required?: boolean;
  "aria-label"?: string;
  "aria-labelledby"?: string;
  slot?: React.ReactNode;
  startIcon?: React.ReactNode;
  upChildren?: React.ReactNode;
  downChildren?: React.ReactNode;
  upLabel?: React.ReactNode;
  downLabel?: React.ReactNode;
  tokenName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInput__ArgsType;
export const PlasmicInput__ArgProps = new Array<ArgPropType>(
  "placeholder",
  "endIcon",
  "value",
  "name",
  "required",
  "aria-label",
  "aria-labelledby",
  "slot",
  "startIcon",
  "upChildren",
  "downChildren",
  "upLabel",
  "downLabel",
  "tokenName"
);

export type PlasmicInput__OverridesType = {
  root?: p.Flex<"div">;
  input?: p.Flex<"input">;
  endIconContainer?: p.Flex<"div">;
};

export interface DefaultInputProps extends pp.BaseTextInputProps {
  placeholder?: string;
  value?: any;
  name?: string;
  required?: boolean;
  "aria-label"?: string;
  "aria-labelledby"?: string;
  slot?: React.ReactNode;
  upChildren?: React.ReactNode;
  downChildren?: React.ReactNode;
  upLabel?: React.ReactNode;
  downLabel?: React.ReactNode;
  tokenName?: React.ReactNode;
  color?: SingleChoiceArg<"stroke" | "whiteStroke">;
  showUpLabel?: SingleBooleanChoiceArg<"showUpLabel">;
  showDownLabel?: SingleBooleanChoiceArg<"showDownLabel">;
  percent?: SingleBooleanChoiceArg<"percent">;
  showTokenName?: SingleBooleanChoiceArg<"showTokenName">;
}

export const defaultInput__Args: Partial<PlasmicInput__ArgsType> = {
  placeholder: "text..." as const,
  value: "" as const
};

function PlasmicInput__RenderFunc(props: {
  variants: PlasmicInput__VariantsArgs;
  args: PlasmicInput__ArgsType;
  overrides: PlasmicInput__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultInput__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_stroke]: hasVariant(variants, "color", "stroke"),
          [sty.rootisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.rootpercent]: hasVariant(variants, "percent", "percent"),
          [sty.rootshowStartIcon]: hasVariant(
            variants,
            "showStartIcon",
            "showStartIcon"
          )
        }
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__vVoNl)}>
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.slot
          })}
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__m0GJu)}>
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.upChildren
          })}
        </div>
      ) : null}
      {(hasVariant(variants, "showUpLabel", "showUpLabel") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___1CoBj, {
            [sty.freeBoxshowUpLabel___1CoBjIbSqa]: hasVariant(
              variants,
              "showUpLabel",
              "showUpLabel"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.upLabel
          })}
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox__wGoC3, {
          [sty.freeBoxcolor_stroke__wGoC32UsIv]: hasVariant(
            variants,
            "color",
            "stroke"
          ),
          [sty.freeBoxcolor_whiteStroke__wGoC3Dz2Fr]: hasVariant(
            variants,
            "color",
            "whiteStroke"
          ),
          [sty.freeBoxpercent__wGoC3Kd5Bk]: hasVariant(
            variants,
            "percent",
            "percent"
          ),
          [sty.freeBoxshowStartIcon__wGoC3TsmAw]: hasVariant(
            variants,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.freeBoxshowUpLabel__wGoC3IbSqa]: hasVariant(
            variants,
            "showUpLabel",
            "showUpLabel"
          )
        })}
      >
        {(
          hasVariant(variants, "showStartIcon", "showStartIcon") ? true : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__vmHw, {
              [sty.freeBoxshowStartIcon__vmHwtsmAw]: hasVariant(
                variants,
                "showStartIcon",
                "showStartIcon"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <SearchsvgIcon
                  className={classNames(projectcss.all, sty.svg__ycKlt)}
                  role={"img"}
                />
              ),

              value: args.startIcon
            })}
          </div>
        ) : null}

        <input
          data-plasmic-name={"input"}
          data-plasmic-override={overrides.input}
          aria-label={args["aria-label"]}
          aria-labelledby={args["aria-labelledby"]}
          className={classNames(projectcss.all, projectcss.input, sty.input, {
            [sty.inputcolor_stroke]: hasVariant(variants, "color", "stroke"),
            [sty.inputcolor_whiteStroke]: hasVariant(
              variants,
              "color",
              "whiteStroke"
            ),
            [sty.inputpercent]: hasVariant(variants, "percent", "percent"),
            [sty.inputshowStartIcon]: hasVariant(
              variants,
              "showStartIcon",
              "showStartIcon"
            )
          })}
          name={args.name}
          placeholder={args.placeholder}
          type={"text" as const}
          value={args.value}
        />

        {(
          hasVariant(variants, "showTokenName", "showTokenName") ? true : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__eg0M3, {
              [sty.freeBoxshowTokenName__eg0M3XCJqj]: hasVariant(
                variants,
                "showTokenName",
                "showTokenName"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.tokenName
            })}
          </div>
        ) : null}
        {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : true) ? (
          <div
            data-plasmic-name={"endIconContainer"}
            data-plasmic-override={overrides.endIconContainer}
            className={classNames(projectcss.all, sty.endIconContainer, {
              [sty.endIconContainershowEndIcon]: hasVariant(
                variants,
                "showEndIcon",
                "showEndIcon"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__ol9RF)}
                  role={"img"}
                />
              ),

              value: args.endIcon,
              className: classNames(sty.slotTargetEndIcon, {
                [sty.slotTargetEndIconshowEndIcon]: hasVariant(
                  variants,
                  "showEndIcon",
                  "showEndIcon"
                )
              })
            })}
          </div>
        ) : null}
      </div>

      {(
        hasVariant(variants, "showDownLabel", "showDownLabel") ? true : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__docmu, {
            [sty.freeBoxshowDownLabel__docmup175Y]: hasVariant(
              variants,
              "showDownLabel",
              "showDownLabel"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.downLabel
          })}
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__wm62Y)}>
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.downChildren
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseTextInputProps>(
  props: P,
  ref: pp.TextInputRef
) {
  return pp.useTextInput<P, typeof PlasmicInput>(
    PlasmicInput,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root",
      input: "input"
    },

    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "input", "endIconContainer"],
  input: ["input"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  input: "input";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInput__VariantsArgs;
    args?: PlasmicInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInput__ArgProps,
      internalVariantPropNames: PlasmicInput__VariantProps
    });

    return PlasmicInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInput";
  } else {
    func.displayName = `PlasmicInput.${nodeName}`;
  }
  return func;
}

export const PlasmicInput = Object.assign(
  // Top-level PlasmicInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicInput
    internalVariantProps: PlasmicInput__VariantProps,
    internalArgProps: PlasmicInput__ArgProps,

    useBehavior
  }
);

export default PlasmicInput;
/* prettier-ignore-end */
