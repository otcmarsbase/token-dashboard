// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: sIxKMhfpOf
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Icon from "../../Icon"; // plasmic-import: E1FwFPFP4L/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicText.module.css"; // plasmic-import: sIxKMhfpOf/css

export type PlasmicText__VariantMembers = {
  weight: "medium" | "semiBold";
  size: "_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28";
  withIconLeft: "withIconLeft";
  title: "title";
  withIconRight: "withIconRight";
  colors: "gray" | "red";
};

export type PlasmicText__VariantsArgs = {
  weight?: SingleChoiceArg<"medium" | "semiBold">;
  size?: SingleChoiceArg<"_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28">;
  withIconLeft?: SingleBooleanChoiceArg<"withIconLeft">;
  title?: SingleBooleanChoiceArg<"title">;
  withIconRight?: SingleBooleanChoiceArg<"withIconRight">;
  colors?: SingleChoiceArg<"gray" | "red">;
};

type VariantPropType = keyof PlasmicText__VariantsArgs;
export const PlasmicText__VariantProps = new Array<VariantPropType>(
  "weight",
  "size",
  "withIconLeft",
  "title",
  "withIconRight",
  "colors"
);

export type PlasmicText__ArgsType = {};
type ArgPropType = keyof PlasmicText__ArgsType;
export const PlasmicText__ArgProps = new Array<ArgPropType>();

export type PlasmicText__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
};

export interface DefaultTextProps {
  weight?: SingleChoiceArg<"medium" | "semiBold">;
  size?: SingleChoiceArg<"_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28">;
  withIconLeft?: SingleBooleanChoiceArg<"withIconLeft">;
  title?: SingleBooleanChoiceArg<"title">;
  withIconRight?: SingleBooleanChoiceArg<"withIconRight">;
  colors?: SingleChoiceArg<"gray" | "red">;
  className?: string;
}

function PlasmicText__RenderFunc(props: {
  variants: PlasmicText__VariantsArgs;
  args: PlasmicText__ArgsType;
  overrides: PlasmicText__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootwithIconRight]: hasVariant(
            variants,
            "withIconRight",
            "withIconRight"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxsize__10]: hasVariant(variants, "size", "_10"),
          [sty.freeBoxsize__11]: hasVariant(variants, "size", "_11"),
          [sty.freeBoxsize__12]: hasVariant(variants, "size", "_12"),
          [sty.freeBoxsize__14]: hasVariant(variants, "size", "_14"),
          [sty.freeBoxsize__16]: hasVariant(variants, "size", "_16"),
          [sty.freeBoxsize__24]: hasVariant(variants, "size", "_24"),
          [sty.freeBoxsize__28]: hasVariant(variants, "size", "_28"),
          [sty.freeBoxweight_medium]: hasVariant(variants, "weight", "medium"),
          [sty.freeBoxweight_semiBold]: hasVariant(
            variants,
            "weight",
            "semiBold"
          ),
          [sty.freeBoxwithIconRight]: hasVariant(
            variants,
            "withIconRight",
            "withIconRight"
          )
        })}
      >
        {(
          hasVariant(variants, "withIconLeft", "withIconLeft") ? true : true
        ) ? (
          <Icon
            className={classNames("__wab_instance", sty.icon__rlfy3, {
              [sty.iconwithIconLeft__rlfy3Bdx26]: hasVariant(
                variants,
                "withIconLeft",
                "withIconLeft"
              )
            })}
          />
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jNzuz,
            {
              [sty.textcolors_gray__jNzuzB4PsL]: hasVariant(
                variants,
                "colors",
                "gray"
              ),
              [sty.textcolors_red__jNzuz2GLuJ]: hasVariant(
                variants,
                "colors",
                "red"
              ),
              [sty.textsize__10__jNzuzPsPn]: hasVariant(
                variants,
                "size",
                "_10"
              ),
              [sty.textsize__11__jNzuzK8ScW]: hasVariant(
                variants,
                "size",
                "_11"
              ),
              [sty.textsize__12__jNzuzUSiNm]: hasVariant(
                variants,
                "size",
                "_12"
              ),
              [sty.textsize__14__jNzuzMoCq]: hasVariant(
                variants,
                "size",
                "_14"
              ),
              [sty.textsize__24__jNzuz24T4X]: hasVariant(
                variants,
                "size",
                "_24"
              ),
              [sty.textsize__28__jNzuznH4ED]: hasVariant(
                variants,
                "size",
                "_28"
              ),
              [sty.texttitle__jNzuzQXncF]: hasVariant(
                variants,
                "title",
                "title"
              ),
              [sty.textweight_medium__jNzuzcKDv1]: hasVariant(
                variants,
                "weight",
                "medium"
              ),
              [sty.textweight_semiBold__jNzuz9KhyJ]: hasVariant(
                variants,
                "weight",
                "semiBold"
              ),
              [sty.textwithIconRight__jNzuzEGtcR]: hasVariant(
                variants,
                "withIconRight",
                "withIconRight"
              )
            }
          )}
        >
          {"Text"}
        </div>

        {(
          hasVariant(variants, "withIconRight", "withIconRight") ? true : true
        ) ? (
          <Icon
            className={classNames("__wab_instance", sty.icon__aKwMs, {
              [sty.iconwithIconRight__aKwMsEGtcR]: hasVariant(
                variants,
                "withIconRight",
                "withIconRight"
              )
            })}
          />
        ) : null}
      </div>

      {true ? (
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(projectcss.all, projectcss.h1, sty.h1)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3Uobo
            )}
          >
            {"Distribution"}
          </div>
        </h1>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h1"],
  freeBox: ["freeBox"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicText__VariantsArgs;
    args?: PlasmicText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicText__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicText__ArgProps,
      internalVariantPropNames: PlasmicText__VariantProps
    });

    return PlasmicText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicText";
  } else {
    func.displayName = `PlasmicText.${nodeName}`;
  }
  return func;
}

export const PlasmicText = Object.assign(
  // Top-level PlasmicText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicText
    internalVariantProps: PlasmicText__VariantProps,
    internalArgProps: PlasmicText__ArgProps
  }
);

export default PlasmicText;
/* prettier-ignore-end */
