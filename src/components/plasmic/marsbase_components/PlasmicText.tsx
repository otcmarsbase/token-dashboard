// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: sIxKMhfpOf
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Icon from "../../Icon"; // plasmic-import: E1FwFPFP4L/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicText.module.css"; // plasmic-import: sIxKMhfpOf/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: zwmcUxC4SL1/icon

export type PlasmicText__VariantMembers = {
  weight: "medium" | "semiBold" | "light";
  size: "_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28" | "_18";
  colors: "gray" | "red" | "white" | "lightGray" | "blue";
  opacity: "_10";
  title: "_1" | "_2" | "_3" | "_4";
  withIconRight: "withIconRight";
  withIconLeft: "withIconLeft";
};

export type PlasmicText__VariantsArgs = {
  weight?: SingleChoiceArg<"medium" | "semiBold" | "light">;
  size?: SingleChoiceArg<
    "_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28" | "_18"
  >;
  colors?: SingleChoiceArg<"gray" | "red" | "white" | "lightGray" | "blue">;
  opacity?: SingleChoiceArg<"_10">;
  title?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4">;
  withIconRight?: SingleBooleanChoiceArg<"withIconRight">;
  withIconLeft?: SingleBooleanChoiceArg<"withIconLeft">;
};

type VariantPropType = keyof PlasmicText__VariantsArgs;
export const PlasmicText__VariantProps = new Array<VariantPropType>(
  "weight",
  "size",
  "colors",
  "opacity",
  "title",
  "withIconRight",
  "withIconLeft"
);

export type PlasmicText__ArgsType = {
  children?: React.ReactNode;
  iconRight?: React.ReactNode;
  iconLeft?: React.ReactNode;
};

type ArgPropType = keyof PlasmicText__ArgsType;
export const PlasmicText__ArgProps = new Array<ArgPropType>(
  "children",
  "iconRight",
  "iconLeft"
);

export type PlasmicText__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
};

export interface DefaultTextProps {
  children?: React.ReactNode;
  iconRight?: React.ReactNode;
  iconLeft?: React.ReactNode;
  weight?: SingleChoiceArg<"medium" | "semiBold" | "light">;
  size?: SingleChoiceArg<
    "_10" | "_11" | "_12" | "_14" | "_16" | "_24" | "_28" | "_18"
  >;
  colors?: SingleChoiceArg<"gray" | "red" | "white" | "lightGray" | "blue">;
  opacity?: SingleChoiceArg<"_10">;
  title?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4">;
  withIconRight?: SingleBooleanChoiceArg<"withIconRight">;
  withIconLeft?: SingleBooleanChoiceArg<"withIconLeft">;
  className?: string;
}

export const defaultText__Args: Partial<PlasmicText__ArgsType> = {};

function PlasmicText__RenderFunc(props: {
  variants: PlasmicText__VariantsArgs;
  args: PlasmicText__ArgsType;
  overrides: PlasmicText__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultText__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.roottitle__2]: hasVariant(variants, "title", "_2"),
          [sty.rootwithIconLeft]: hasVariant(
            variants,
            "withIconLeft",
            "withIconLeft"
          ),
          [sty.rootwithIconRight]: hasVariant(
            variants,
            "withIconRight",
            "withIconRight"
          )
        }
      )}
    >
      {(hasVariant(variants, "withIconLeft", "withIconLeft") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__ifxz4, {
            [sty.freeBoxwithIconLeft__ifxz4SLg5G]: hasVariant(
              variants,
              "withIconLeft",
              "withIconLeft"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__v7Hqz)}
                role={"img"}
              />
            ),

            value: args.iconLeft
          })}
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox___4Jz6K, {
          [sty.freeBoxcolors_gray___4Jz6KB4PsL]: hasVariant(
            variants,
            "colors",
            "gray"
          ),
          [sty.freeBoxcolors_lightGray___4Jz6KX0IYe]: hasVariant(
            variants,
            "colors",
            "lightGray"
          ),
          [sty.freeBoxcolors_red___4Jz6K2GLuJ]: hasVariant(
            variants,
            "colors",
            "red"
          ),
          [sty.freeBoxcolors_white___4Jz6KNxEhm]: hasVariant(
            variants,
            "colors",
            "white"
          ),
          [sty.freeBoxsize__10___4Jz6KPsPn]: hasVariant(
            variants,
            "size",
            "_10"
          ),
          [sty.freeBoxsize__11___4Jz6KK8ScW]: hasVariant(
            variants,
            "size",
            "_11"
          ),
          [sty.freeBoxsize__12___4Jz6KUSiNm]: hasVariant(
            variants,
            "size",
            "_12"
          ),
          [sty.freeBoxsize__14___4Jz6KMoCq]: hasVariant(
            variants,
            "size",
            "_14"
          ),
          [sty.freeBoxsize__24___4Jz6K24T4X]: hasVariant(
            variants,
            "size",
            "_24"
          ),
          [sty.freeBoxsize__28___4Jz6KnH4ED]: hasVariant(
            variants,
            "size",
            "_28"
          ),
          [sty.freeBoxtitle__2___4Jz6KwDoKp]: hasVariant(
            variants,
            "title",
            "_2"
          ),
          [sty.freeBoxweight_medium___4Jz6KcKDv1]: hasVariant(
            variants,
            "weight",
            "medium"
          ),
          [sty.freeBoxweight_semiBold___4Jz6K9KhyJ]: hasVariant(
            variants,
            "weight",
            "semiBold"
          ),
          [sty.freeBoxwithIconLeft___4Jz6KsLg5G]: hasVariant(
            variants,
            "withIconLeft",
            "withIconLeft"
          ),
          [sty.freeBoxwithIconRight___4Jz6KOZp1U]: hasVariant(
            variants,
            "withIconRight",
            "withIconRight"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolors_blue]: hasVariant(
              variants,
              "colors",
              "blue"
            ),
            [sty.slotTargetChildrencolors_gray]: hasVariant(
              variants,
              "colors",
              "gray"
            ),
            [sty.slotTargetChildrencolors_lightGray]: hasVariant(
              variants,
              "colors",
              "lightGray"
            ),
            [sty.slotTargetChildrencolors_red]: hasVariant(
              variants,
              "colors",
              "red"
            ),
            [sty.slotTargetChildrenopacity__10]: hasVariant(
              variants,
              "opacity",
              "_10"
            ),
            [sty.slotTargetChildrensize__10]: hasVariant(
              variants,
              "size",
              "_10"
            ),
            [sty.slotTargetChildrensize__11]: hasVariant(
              variants,
              "size",
              "_11"
            ),
            [sty.slotTargetChildrensize__12]: hasVariant(
              variants,
              "size",
              "_12"
            ),
            [sty.slotTargetChildrensize__14]: hasVariant(
              variants,
              "size",
              "_14"
            ),
            [sty.slotTargetChildrensize__16]: hasVariant(
              variants,
              "size",
              "_16"
            ),
            [sty.slotTargetChildrensize__18]: hasVariant(
              variants,
              "size",
              "_18"
            ),
            [sty.slotTargetChildrensize__24]: hasVariant(
              variants,
              "size",
              "_24"
            ),
            [sty.slotTargetChildrensize__28]: hasVariant(
              variants,
              "size",
              "_28"
            ),
            [sty.slotTargetChildrentitle__1]: hasVariant(
              variants,
              "title",
              "_1"
            ),
            [sty.slotTargetChildrentitle__2]: hasVariant(
              variants,
              "title",
              "_2"
            ),
            [sty.slotTargetChildrentitle__3]: hasVariant(
              variants,
              "title",
              "_3"
            ),
            [sty.slotTargetChildrentitle__4]: hasVariant(
              variants,
              "title",
              "_4"
            ),
            [sty.slotTargetChildrenweight_light]: hasVariant(
              variants,
              "weight",
              "light"
            ),
            [sty.slotTargetChildrenweight_medium]: hasVariant(
              variants,
              "weight",
              "medium"
            ),
            [sty.slotTargetChildrenweight_semiBold]: hasVariant(
              variants,
              "weight",
              "semiBold"
            ),
            [sty.slotTargetChildrenwithIconLeft]: hasVariant(
              variants,
              "withIconLeft",
              "withIconLeft"
            ),
            [sty.slotTargetChildrenwithIconRight]: hasVariant(
              variants,
              "withIconRight",
              "withIconRight"
            )
          })
        })}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__lzUj9, {
          [sty.freeBoxsize__10__lzUj9PsPn]: hasVariant(variants, "size", "_10"),
          [sty.freeBoxsize__11__lzUj9K8ScW]: hasVariant(
            variants,
            "size",
            "_11"
          ),
          [sty.freeBoxsize__12__lzUj9USiNm]: hasVariant(
            variants,
            "size",
            "_12"
          ),
          [sty.freeBoxsize__14__lzUj9MoCq]: hasVariant(variants, "size", "_14"),
          [sty.freeBoxsize__16__lzUj9ZvWcY]: hasVariant(
            variants,
            "size",
            "_16"
          ),
          [sty.freeBoxsize__24__lzUj924T4X]: hasVariant(
            variants,
            "size",
            "_24"
          ),
          [sty.freeBoxsize__28__lzUj9NH4ED]: hasVariant(
            variants,
            "size",
            "_28"
          ),
          [sty.freeBoxweight_medium__lzUj9CKDv1]: hasVariant(
            variants,
            "weight",
            "medium"
          ),
          [sty.freeBoxweight_semiBold__lzUj99KhyJ]: hasVariant(
            variants,
            "weight",
            "semiBold"
          ),
          [sty.freeBoxwithIconRight__lzUj9OZp1U]: hasVariant(
            variants,
            "withIconRight",
            "withIconRight"
          )
        })}
      >
        {true ? (
          <Icon className={classNames("__wab_instance", sty.icon__aKwMs)} />
        ) : null}
      </div>

      {true ? (
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(projectcss.all, projectcss.h1, sty.h1)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3Uobo
            )}
          >
            {"Distribution"}
          </div>
        </h1>
      ) : null}
      {true ? (
        <Icon className={classNames("__wab_instance", sty.icon__n7Fvr)} />
      ) : null}
      {true ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rvdAi
          )}
        >
          {"Enter some text"}
        </div>
      ) : null}
      {(
        hasVariant(variants, "withIconRight", "withIconRight") ? true : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__g95C7, {
            [sty.freeBoxwithIconRight__g95C7OZp1U]: hasVariant(
              variants,
              "withIconRight",
              "withIconRight"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__hbDas)}
                role={"img"}
              />
            ),

            value: args.iconRight
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicText__VariantsArgs;
    args?: PlasmicText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicText__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicText__ArgProps,
      internalVariantPropNames: PlasmicText__VariantProps
    });

    return PlasmicText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicText";
  } else {
    func.displayName = `PlasmicText.${nodeName}`;
  }
  return func;
}

export const PlasmicText = Object.assign(
  // Top-level PlasmicText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicText
    internalVariantProps: PlasmicText__VariantProps,
    internalArgProps: PlasmicText__ArgProps
  }
);

export default PlasmicText;
/* prettier-ignore-end */
