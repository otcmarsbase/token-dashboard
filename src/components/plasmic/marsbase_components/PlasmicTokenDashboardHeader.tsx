// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: uSh1_um7XN
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderOverview from "../../HeaderOverview"; // plasmic-import: 5SbWwwlAWA/component
import Text from "../../Text"; // plasmic-import: sIxKMhfpOf/component
import HeaderActions from "../../HeaderActions"; // plasmic-import: mWUFULV0cz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicTokenDashboardHeader.module.css"; // plasmic-import: uSh1_um7XN/css

export type PlasmicTokenDashboardHeader__VariantMembers = {
  screen: "mobile";
};

export type PlasmicTokenDashboardHeader__VariantsArgs = {
  screen?: SingleChoiceArg<"mobile">;
};

type VariantPropType = keyof PlasmicTokenDashboardHeader__VariantsArgs;
export const PlasmicTokenDashboardHeader__VariantProps =
  new Array<VariantPropType>("screen");

export type PlasmicTokenDashboardHeader__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTokenDashboardHeader__ArgsType;
export const PlasmicTokenDashboardHeader__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicTokenDashboardHeader__OverridesType = {
  root?: p.Flex<"div">;
  headerOverview?: p.Flex<typeof HeaderOverview>;
  headerActions?: p.Flex<typeof HeaderActions>;
};

export interface DefaultTokenDashboardHeaderProps {
  children?: React.ReactNode;
  screen?: SingleChoiceArg<"mobile">;
  className?: string;
}

export const defaultTokenDashboardHeader__Args: Partial<PlasmicTokenDashboardHeader__ArgsType> =
  {};

function PlasmicTokenDashboardHeader__RenderFunc(props: {
  variants: PlasmicTokenDashboardHeader__VariantsArgs;
  args: PlasmicTokenDashboardHeader__ArgsType;
  overrides: PlasmicTokenDashboardHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTokenDashboardHeader__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__mwKT, {
          [sty.freeBoxscreen_mobile__mwKTk1Wno]: hasVariant(
            variants,
            "screen",
            "mobile"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__rmXpK)}>
          <HeaderOverview
            data-plasmic-name={"headerOverview"}
            data-plasmic-override={overrides.headerOverview}
            className={classNames("__wab_instance", sty.headerOverview)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <Text
                  className={classNames("__wab_instance", sty.text__bzpLk)}
                  title={true}
                />
              ),

              value: args.children
            })}
          </HeaderOverview>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___7Tp9)}>
          <HeaderActions
            data-plasmic-name={"headerActions"}
            data-plasmic-override={overrides.headerActions}
            className={classNames("__wab_instance", sty.headerActions)}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerOverview", "headerActions"],
  headerOverview: ["headerOverview"],
  headerActions: ["headerActions"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerOverview: typeof HeaderOverview;
  headerActions: typeof HeaderActions;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTokenDashboardHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTokenDashboardHeader__VariantsArgs;
    args?: PlasmicTokenDashboardHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTokenDashboardHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTokenDashboardHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTokenDashboardHeader__ArgProps,
      internalVariantPropNames: PlasmicTokenDashboardHeader__VariantProps
    });

    return PlasmicTokenDashboardHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTokenDashboardHeader";
  } else {
    func.displayName = `PlasmicTokenDashboardHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicTokenDashboardHeader = Object.assign(
  // Top-level PlasmicTokenDashboardHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerOverview: makeNodeComponent("headerOverview"),
    headerActions: makeNodeComponent("headerActions"),

    // Metadata about props expected for PlasmicTokenDashboardHeader
    internalVariantProps: PlasmicTokenDashboardHeader__VariantProps,
    internalArgProps: PlasmicTokenDashboardHeader__ArgProps
  }
);

export default PlasmicTokenDashboardHeader;
/* prettier-ignore-end */
