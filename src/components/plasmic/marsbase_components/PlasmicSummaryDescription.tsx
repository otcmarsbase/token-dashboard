// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: EHa0voQ-C0
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Icon from "../../Icon"; // plasmic-import: E1FwFPFP4L/component
import Text from "../../Text"; // plasmic-import: sIxKMhfpOf/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicSummaryDescription.module.css"; // plasmic-import: EHa0voQ-C0/css

export type PlasmicSummaryDescription__VariantMembers = {};

export type PlasmicSummaryDescription__VariantsArgs = {};
type VariantPropType = keyof PlasmicSummaryDescription__VariantsArgs;
export const PlasmicSummaryDescription__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSummaryDescription__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSummaryDescription__ArgsType;
export const PlasmicSummaryDescription__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicSummaryDescription__OverridesType = {
  root?: p.Flex<"div">;
  icon?: p.Flex<typeof Icon>;
  text?: p.Flex<typeof Text>;
};

export interface DefaultSummaryDescriptionProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicSummaryDescription__RenderFunc(props: {
  variants: PlasmicSummaryDescription__VariantsArgs;
  args: PlasmicSummaryDescription__ArgsType;
  overrides: PlasmicSummaryDescription__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lW4T7)}>
        <Icon
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames("__wab_instance", sty.icon)}
        />

        <div className={classNames(projectcss.all, sty.freeBox___340)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <Text
                className={classNames("__wab_instance", sty.text__kZ7D7)}
                size={"_24" as const}
                weight={"semiBold" as const}
              />
            ),

            value: args.children
          })}

          <Text
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames("__wab_instance", sty.text)}
            colors={"gray" as const}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "icon", "text"],
  icon: ["icon"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  icon: typeof Icon;
  text: typeof Text;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSummaryDescription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSummaryDescription__VariantsArgs;
    args?: PlasmicSummaryDescription__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSummaryDescription__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSummaryDescription__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSummaryDescription__ArgProps,
      internalVariantPropNames: PlasmicSummaryDescription__VariantProps
    });

    return PlasmicSummaryDescription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSummaryDescription";
  } else {
    func.displayName = `PlasmicSummaryDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicSummaryDescription = Object.assign(
  // Top-level PlasmicSummaryDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icon: makeNodeComponent("icon"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSummaryDescription
    internalVariantProps: PlasmicSummaryDescription__VariantProps,
    internalArgProps: PlasmicSummaryDescription__ArgProps
  }
);

export default PlasmicSummaryDescription;
/* prettier-ignore-end */
