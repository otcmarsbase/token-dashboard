// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ujWBNnbL2n4RZDdiZiYFdw
// Component: QvSVaYnti4Is
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TokenDashboardHeader from "../../TokenDashboardHeader"; // plasmic-import: uSh1_um7XN/component
import Text from "../../Text"; // plasmic-import: sIxKMhfpOf/component
import NftTableSummary from "../../NftTableSummary"; // plasmic-import: O93YgHOHgbm/component
import NftTable from "../../NftTable"; // plasmic-import: S7FYhea1xT/component

import { useScreenVariants as useScreenVariants_3LOXnHzsFmncl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3lOXnHZSFmncl/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_marsbase_components.module.css"; // plasmic-import: ujWBNnbL2n4RZDdiZiYFdw/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: QvSVaYnti4Is/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  tokenDashboardHeader?: p.Flex<typeof TokenDashboardHeader>;
  text?: p.Flex<typeof Text>;
  nftTableSummary?: p.Flex<typeof NftTableSummary>;
  nftTable?: p.Flex<typeof NftTable>;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3LOXnHzsFmncl()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <TokenDashboardHeader
            data-plasmic-name={"tokenDashboardHeader"}
            data-plasmic-override={overrides.tokenDashboardHeader}
            className={classNames("__wab_instance", sty.tokenDashboardHeader)}
            screen={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("mobile" as const)
                : undefined
            }
          >
            <Text
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames("__wab_instance", sty.text)}
              title={true}
            />
          </TokenDashboardHeader>

          <NftTableSummary
            data-plasmic-name={"nftTableSummary"}
            data-plasmic-override={overrides.nftTableSummary}
            className={classNames("__wab_instance", sty.nftTableSummary)}
          />

          <NftTable
            data-plasmic-name={"nftTable"}
            data-plasmic-override={overrides.nftTable}
            className={classNames("__wab_instance", sty.nftTable)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tokenDashboardHeader", "text", "nftTableSummary", "nftTable"],
  tokenDashboardHeader: ["tokenDashboardHeader", "text"],
  text: ["text"],
  nftTableSummary: ["nftTableSummary"],
  nftTable: ["nftTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tokenDashboardHeader: typeof TokenDashboardHeader;
  text: typeof Text;
  nftTableSummary: typeof NftTableSummary;
  nftTable: typeof NftTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tokenDashboardHeader: makeNodeComponent("tokenDashboardHeader"),
    text: makeNodeComponent("text"),
    nftTableSummary: makeNodeComponent("nftTableSummary"),
    nftTable: makeNodeComponent("nftTable"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
